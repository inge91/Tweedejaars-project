.. _allandmarkdetection-api:

ALLandMarkDetection API
=======================

:ref:`naoqi-vision` || :ref:`Overview <allandmarkdetection>` | API |
:ref:`Tutorials <allandmarkdetection-tuto>`

------------------------

.. seealso::

   - :ref:`Video camera Hardware<hardware-video>`



Namespace : **AL**

.. code-block:: cpp

  #include <alproxies/allandmarkdetectionproxy.h>



Method list
-----------

As any module, this module inherits methods from :ref:`almodule-api`.
It also has the following specific methods:

.. cpp:class:: ALLandMarkDetectionProxy


* :cpp:func:`ALLandMarkDetectionInfoProxy::getCurrentPeriod`
* :cpp:func:`ALLandMarkDetectionInfoProxy::getCurrentPrecision`
* :cpp:func:`ALLandMarkDetectionInfoProxy::getMyPeriod`
* :cpp:func:`ALLandMarkDetectionInfoProxy::getMyPrecision`
* :cpp:func:`ALLandMarkDetectionInfoProxy::getOutputNames`
* :cpp:func:`ALLandMarkDetectionInfoProxy::getSubscribersInfo`
* :cpp:func:`ALLandMarkDetectionInfoProxy::run`
* :cpp:func:`ALLandMarkDetectionInfoProxy::subscribe`
* :cpp:func:`ALLandMarkDetectionInfoProxy::unsubscribe`
* :cpp:func:`ALLandMarkDetectionInfoProxy::updatePeriod`
* :cpp:func:`ALLandMarkDetectionInfoProxy::updatePrecision`



Event list
----------

* :naoqi:event:`LandmarkDetected`



Methods
-------


.. cpp:function:: int ALLandMarkDetectionInfoProxy::getCurrentPeriod()

  Gets the current period.

  :return: Refresh period (in milliseconds).

.. cpp:function:: float ALLandMarkDetectionInfoProxy::getCurrentPrecision()

  Gets the current precision.

  :return: Precision of the extractor.

.. cpp:function:: int ALLandMarkDetectionInfoProxy::getMyPeriod(const std::string& name)

  Gets the period for a specific subscription.

  :param name: Name of the module which has subscribed.

  :return: Refresh period (in milliseconds).

.. cpp:function:: float ALLandMarkDetectionInfoProxy::getMyPrecision(const std::string& name)

  Gets the precision for a specific subscription.

  :param name: name of the module which has subscribed

  :return: precision of the extractor

.. cpp:function:: std::vector<std::string> ALLandMarkDetectionInfoProxy::getOutputNames()

  Get the list of values updated in ALMemory.

  :return: Array of values updated by this extractor in ALMemory

.. cpp:function:: AL::ALValue ALLandMarkDetectionInfoProxy::getSubscribersInfo()

  Gets the parameters given by the module.

  :return: Array of names and parameters of all subscribers.

.. cpp:function:: void ALLandMarkDetectionInfoProxy::run()

  protected method

.. cpp:function:: void ALLandMarkDetectionInfoProxy::subscribe( const std::string& name, const int& period, const float& precision )

  Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData("keyName"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.

  :param name: Name of the module which subscribes.

  :param period: Refresh period (in milliseconds) if relevant.

  :param precision: Precision of the extractor if relevant.

.. cpp:function:: void ALLandMarkDetectionInfoProxy::subscribe(const std::string& name)

  Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData("keyName"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.

  :param name: Name of the module which subscribes.

.. cpp:function:: void ALLandMarkDetectionInfoProxy::unsubscribe(const std::string& name)

  Unsubscribes from the extractor.

  :param name: Name of the module which had subscribed.

.. cpp:function:: void ALLandMarkDetectionInfoProxy::updatePeriod( const std::string& name, const int& period )

  Updates the period if relevant.

  :param name: Name of the module which has subscribed.

  :param period: Refresh period (in milliseconds).

.. cpp:function:: void ALLandMarkDetectionInfoProxy::updatePrecision( const std::string& name, const float& precision )

  Updates the precision if relevant.

  :param name: Name of the module which has subscribed.

  :param precision: Precision of the extractor.


Events
------

.. naoqi:event:: LandmarkDetected(AL::ALValue value)

  Raised when one or several landmarks are currently being detected.

  :param value: Informations related to the detected landmarks. Further details below.


LandMarkDetected Value Structure
-----------------------------------

The output ALValue is organized as follows:

ALLandMarkDetectionInfo
+++++++++++++++++++++++

.. code-block:: guess

   ALLandMarkDetectionInfo {
     TimeStamp,
     MarkInfo[N],
     CameraPoseInNAOSpace,
     CameraPoseInWorldSpace,
     CurrentCameraName
   }

with as many **mark_info** tags as marks currently detected.

TimeStamp
+++++++++

This field is the time stamp of the image that was used to perform the detection.

.. code-block:: guess

   TimeStamp {
     TimeStamp_Seconds,
     Timestamp_Microseconds
   }

MarkInfo
++++++++

For each detected mark, we have one **MarkInfo** field:

.. code-block:: guess

   MarkInfo {
     ShapeInfo,
     MarkID
   }


ShapeInfo
^^^^^^^^^

.. code-block:: guess

   ShapeInfo {
     1,
     alpha,
     beta,
     sizeX,
     sizeY
   }

- the heading angle describes how the Naomark is oriented about the vertical axis with regards to NAO's head.

- **alpha** and **beta** represent the location of the NaoMark's center in terms of camera angles in radian.

- **sizeX** and **sizeY** are the mark's size in camera angles.


MarkID
^^^^^^ 

is the number written on the naomark and which corresponds to its pattern.


CameraPoseInNaoSpace
++++++++++++++++++++++

:term:`Position6D` of the camera at the time the image was taken, in :term:`SPACE_NAO`.

CameraPoseInNaoSpace
+++++++++++++++++++++

:term:`Position6D` of the camera at the time the image was taken, in :term:`SPACE_WORLD`.


CurrentCameraName
+++++++++++++++++++

Name of the camera that was used to take the image ("CameraTop", or "CameraBottom").
